name: ⚛️ Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'macchain-frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'macchain-frontend/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ===== 코드 품질 검사 =====
  code-quality:
    name: 📋 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: macchain-frontend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: cd macchain-frontend && npm ci
      
    - name: 🔍 ESLint Check
      run: cd macchain-frontend && npm run lint
      continue-on-error: true
      
    - name: 🎨 Prettier Check
      run: cd macchain-frontend && npm run format:check
      continue-on-error: true
      
    - name: 📏 TypeScript Check
      run: cd macchain-frontend && npm run type-check

  # ===== 빌드 및 테스트 =====
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: macchain-frontend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: cd macchain-frontend && npm ci
      
    - name: 🧪 Run Unit Tests
      run: cd macchain-frontend && npm run test:coverage
      
    - name: 🏗️ Build Application
      run: cd macchain-frontend && npm run build
      
    - name: 📊 Upload Coverage to Codecov
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        file: macchain-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: 📦 Upload Build Artifacts
      if: matrix.node-version == 18
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: macchain-frontend/dist/
        retention-days: 7

  # ===== E2E 테스트 =====
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: macchain-frontend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: cd macchain-frontend && npm ci
      
    - name: 🎭 Install Playwright
      run: cd macchain-frontend && npx playwright install --with-deps
      
    - name: 🏗️ Build Application
      run: cd macchain-frontend && npm run build
      
    - name: 🎭 Run E2E Tests
      run: cd macchain-frontend && npm run test:e2e
      
    - name: 📊 Upload E2E Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: macchain-frontend/test-results/
        retention-days: 7

  # ===== 보안 스캔 =====
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 🛡️ Run npm audit
      run: cd macchain-frontend && npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: 🔍 Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=macchain-frontend/package.json --severity-threshold=high
      continue-on-error: true

  # ===== 성능 테스트 =====
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: macchain-frontend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: cd macchain-frontend && npm ci
      
    - name: 🏗️ Build Application
      run: cd macchain-frontend && npm run build
      
    - name: ⚡ Lighthouse Performance Test
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './macchain-frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # ===== Docker 이미지 빌드 =====
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📦 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/macchain-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./macchain-frontend
        file: ./macchain-frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== 배포 =====
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /opt/macchain
          docker-compose pull frontend
          docker-compose up -d frontend
          docker system prune -f
          
    - name: 🌐 Deploy to Vercel (Staging)
      if: github.ref == 'refs/heads/develop'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./macchain-frontend

  # ===== 알림 =====
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📧 Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#macchain-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
