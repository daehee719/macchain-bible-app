name: 📋 Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    env:
      JAVA_VERSION: 17
      GRADLE_VERSION: 8.5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        repository: daehee719/macchain-bible-app
        token: ${{ secrets.GITHUB_TOKEN }}
        ssh-strict: true
        ssh-user: git
        persist-credentials: true
        clean: true
        sparse-checkout-cone-mode: true
        fetch-depth: 1
        fetch-tags: false
        show-progress: true
        lfs: false
        submodules: false
        set-safe-directory: true

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        java-package: jdk
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        overwrite-settings: true
        job-status: success
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: Linux-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          Linux-gradle-

    - name: 🔧 Make gradlew executable
      run: chmod +x gradlew

    - name: 🧹 Clean project
      run: ./gradlew clean

    - name: 🔍 Check code style
      run: ./gradlew checkstyleMain checkstyleTest

    - name: 🧪 Run tests
      run: ./gradlew test

    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests
        path: build/test-results/test/TEST-*.xml
        reporter: java-junit

    - name: 🔒 Security scan
      run: ./gradlew dependencyCheckAnalyze

    - name: 📦 Build application
      run: ./gradlew build -x test

    - name: 🐳 Build Docker image
      run: |
        cd macchain-backend
        docker build -t macchain-backend:${{ github.sha }} .

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: build/libs/*.jar
        retention-days: 7

  deploy:
    needs: code-quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to AWS EC2
      run: |
        echo "🚀 Deploying to AWS EC2..."
        # Add deployment commands here