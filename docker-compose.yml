
services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: macchain-postgres
    environment:
      POSTGRES_DB: macchain
      POSTGRES_USER: macchain
      POSTGRES_PASSWORD: macchain
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./macchain-backend/src/main/resources/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U macchain -d macchain"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - macchain-network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: macchain-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - macchain-network

  # MongoDB (AI 분석 데이터)
  mongodb:
    image: mongo:6.0
    container_name: macchain-mongodb
    environment:
      MONGO_INITDB_DATABASE: macchain_analysis
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command: mongod --bind_ip_all --noauth --dbpath /data/db --setParameter authenticationMechanisms=
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - macchain-network

  # Spring Boot 백엔드
  backend:
    build:
      context: ./macchain-backend
      dockerfile: Dockerfile
    container_name: macchain-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/macchain
      SPRING_DATASOURCE_USERNAME: macchain
      SPRING_DATASOURCE_PASSWORD: macchain
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - macchain-network
    restart: unless-stopped

  # React 프론트엔드
  frontend:
    build:
      context: ./macchain-frontend
      dockerfile: Dockerfile
    container_name: macchain-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080/api
    depends_on:
      - backend
    networks:
      - macchain-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:

networks:
  macchain-network:
    driver: bridge
