version: '3.8'

services:
  # ===== 데이터베이스 서비스 =====
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: macchain-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-macchain}
      POSTGRES_USER: ${POSTGRES_USER:-macchain}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-macchain}
    ports:
      - "${POSTGRES_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./macchain-backend/src/main/resources/data.sql:/docker-entrypoint-initdb.d/data.sql
    networks:
      - macchain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-macchain} -d ${POSTGRES_DB:-macchain}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MongoDB for AI Analysis
  mongodb:
    image: mongo:6.0
    container_name: macchain-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-macchain}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-macchain123}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-macchain_analysis}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - macchain-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: macchain-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-macchain123}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    networks:
      - macchain-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ===== 애플리케이션 서비스 =====

  # Backend Service
  backend:
    build:
      context: ./macchain-backend
      dockerfile: Dockerfile
    image: ${BACKEND_IMAGE:-macchain/backend:latest}
    container_name: macchain-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT:-prod}
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-macchain}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-macchain}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-macchain}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      
      # MongoDB Configuration
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: ${MONGODB_DB:-macchain_analysis}
      SPRING_DATA_MONGODB_USERNAME: ${MONGODB_USER:-macchain}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGODB_PASSWORD:-macchain123}
      
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-macchain123}
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-macchain-jwt-secret-key-2024}
      
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - macchain-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./macchain-frontend
      dockerfile: Dockerfile
    image: ${FRONTEND_IMAGE:-macchain/frontend:latest}
    container_name: macchain-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080/api}
      VITE_APP_NAME: MacChain Bible App
      VITE_APP_VERSION: 1.0.0
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - macchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # ===== 모니터링 서비스 =====

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: macchain-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - macchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  macchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16